
// This is a simplified version of what would be a minified script
(function() {
  // Store configuration
  const config = window.chatbaseConfig || {};
  
  // Create chat bubble
  function createChatBubble() {
    // Create container
    const container = document.createElement('div');
    container.style.position = 'fixed';
    container.style.bottom = '20px';
    container.style.right = '20px';
    container.style.zIndex = '9999';
    document.body.appendChild(container);
    
    // Create bubble button
    const button = document.createElement('button');
    button.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z"></path></svg>';
    button.style.width = '60px';
    button.style.height = '60px';
    button.style.borderRadius = '50%';
    button.style.backgroundColor = config.primaryColor || '#6366f1';
    button.style.color = 'white';
    button.style.border = 'none';
    button.style.cursor = 'pointer';
    button.style.boxShadow = '0 4px 8px rgba(0,0,0,0.2)';
    button.style.display = 'flex';
    button.style.alignItems = 'center';
    button.style.justifyContent = 'center';
    container.appendChild(button);
    
    // Create chat modal (hidden initially)
    const modal = document.createElement('div');
    modal.style.position = 'fixed';
    modal.style.bottom = '90px';
    modal.style.right = '20px';
    modal.style.width = '350px';
    modal.style.height = '500px';
    modal.style.backgroundColor = 'white';
    modal.style.borderRadius = '10px';
    modal.style.boxShadow = '0 4px 12px rgba(0,0,0,0.15)';
    modal.style.display = 'none';
    modal.style.flexDirection = 'column';
    modal.style.overflow = 'hidden';
    container.appendChild(modal);
    
    // Header
    const header = document.createElement('div');
    header.style.padding = '15px';
    header.style.borderBottom = '1px solid #eee';
    header.style.display = 'flex';
    header.style.justifyContent = 'space-between';
    header.style.backgroundColor = config.primaryColor || '#6366f1';
    header.style.color = 'white';
    modal.appendChild(header);
    
    // Title
    const title = document.createElement('div');
    title.textContent = config.title || 'Chat with our AI';
    title.style.fontWeight = 'bold';
    header.appendChild(title);
    
    // Close button
    const closeBtn = document.createElement('button');
    closeBtn.innerHTML = '&times;';
    closeBtn.style.background = 'none';
    closeBtn.style.border = 'none';
    closeBtn.style.color = 'white';
    closeBtn.style.fontSize = '20px';
    closeBtn.style.cursor = 'pointer';
    header.appendChild(closeBtn);
    
    // Messages container
    const messagesContainer = document.createElement('div');
    messagesContainer.style.flex = '1';
    messagesContainer.style.overflow = 'auto';
    messagesContainer.style.padding = '15px';
    modal.appendChild(messagesContainer);
    
    // Initial message
    const initialMessage = document.createElement('div');
    initialMessage.style.backgroundColor = '#f0f0f0';
    initialMessage.style.padding = '10px 15px';
    initialMessage.style.borderRadius = '10px';
    initialMessage.style.maxWidth = '80%';
    initialMessage.style.marginBottom = '10px';
    initialMessage.textContent = config.description || 'Hi there! How can I help you today?';
    messagesContainer.appendChild(initialMessage);
    
    // Input container
    const inputContainer = document.createElement('div');
    inputContainer.style.padding = '15px';
    inputContainer.style.borderTop = '1px solid #eee';
    inputContainer.style.display = 'flex';
    modal.appendChild(inputContainer);
    
    // Input
    const input = document.createElement('input');
    input.type = 'text';
    input.placeholder = 'Type your message...';
    input.style.flex = '1';
    input.style.padding = '10px';
    input.style.border = '1px solid #ddd';
    input.style.borderRadius = '4px';
    input.style.marginRight = '10px';
    inputContainer.appendChild(input);
    
    // Send button
    const sendBtn = document.createElement('button');
    sendBtn.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><line x1="22" y1="2" x2="11" y2="13"></line><polygon points="22 2 15 22 11 13 2 9 22 2"></polygon></svg>';
    sendBtn.style.backgroundColor = config.primaryColor || '#6366f1';
    sendBtn.style.color = 'white';
    sendBtn.style.border = 'none';
    sendBtn.style.borderRadius = '4px';
    sendBtn.style.padding = '0 15px';
    sendBtn.style.cursor = 'pointer';
    sendBtn.style.display = 'flex';
    sendBtn.style.alignItems = 'center';
    sendBtn.style.justifyContent = 'center';
    inputContainer.appendChild(sendBtn);
    
    // Toggle modal on button click
    button.addEventListener('click', function() {
      if (modal.style.display === 'none') {
        modal.style.display = 'flex';
      } else {
        modal.style.display = 'none';
      }
    });
    
    // Close modal on close button click
    closeBtn.addEventListener('click', function() {
      modal.style.display = 'none';
    });
    
    // Send message function
    function sendMessage() {
      const messageText = input.value.trim();
      if (messageText) {
        // User message
        const userMsg = document.createElement('div');
        userMsg.style.backgroundColor = config.primaryColor || '#6366f1';
        userMsg.style.color = 'white';
        userMsg.style.padding = '10px 15px';
        userMsg.style.borderRadius = '10px';
        userMsg.style.maxWidth = '80%';
        userMsg.style.marginBottom = '10px';
        userMsg.style.marginLeft = 'auto';
        userMsg.textContent = messageText;
        messagesContainer.appendChild(userMsg);
        
        // Clear input
        input.value = '';
        
        // Simulate response (in a real implementation, this would be an API call)
        setTimeout(function() {
          const botMsg = document.createElement('div');
          botMsg.style.backgroundColor = '#f0f0f0';
          botMsg.style.padding = '10px 15px';
          botMsg.style.borderRadius = '10px';
          botMsg.style.maxWidth = '80%';
          botMsg.style.marginBottom = '10px';
          botMsg.textContent = `This is a simulated response to: "${messageText}"`;
          messagesContainer.appendChild(botMsg);
          
          // Scroll to bottom
          messagesContainer.scrollTop = messagesContainer.scrollHeight;
        }, 1000);
        
        // Scroll to bottom
        messagesContainer.scrollTop = messagesContainer.scrollHeight;
      }
    }
    
    // Send on button click
    sendBtn.addEventListener('click', sendMessage);
    
    // Send on Enter key
    input.addEventListener('keypress', function(e) {
      if (e.key === 'Enter') {
        sendMessage();
      }
    });

    // Store reference to initialized state
    window.chatbase = function(command) {
      if (command === "getState") return "initialized";
      if (command === "open") modal.style.display = 'flex';
      if (command === "close") modal.style.display = 'none';
      if (command === "toggle") {
        modal.style.display = modal.style.display === 'none' ? 'flex' : 'none';
      }
    };
  }
  
  // Initialize chat bubble
  createChatBubble();
})();
